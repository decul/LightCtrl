#pragma once

#define OutPos 0
#define IPos 1
#define PPos 2

#define COLOR_COUNT 5
#define POINT_COUNT 19

class LedCharacteristics {
private:
    float points[COLOR_COUNT][POINT_COUNT][3] = {
        {
            {   0,  0.0,    0.0 },
            { 25, 0.001, 0.001 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 },
            { 187, 1.0, 1.0 }
        },
        {
            {   0,  0.0,    0.0 },
            { 23, 0.001, 0.001 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 },
            { 176, 1.0, 1.0 }
        },
        {
            {   0,  0.0,    0.0 },
            { 24, 0.001, 0.001 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 },
            { 198, 1.0, 1.0 }
        },
        {
            {   0,  0.0,    0.0 },
            {  30,	0.003,	0.022875 },
            {  40,	0.034,	0.27404 },
            {  50,	0.078,	0.65286 },
            {  60,	0.125,	1.0825 },
            {  70,	0.173,	1.54489 },
            {  80,	0.222,	2.0424 },
            { 100,	0.32,	3.0928 },
            { 120,	0.41,	4.1574 },
            { 130,	0.45,	4.6395 },
            { 140,	0.47,	4.89975 },
            { 150,	0.49,	5.1548 },
            { 160,	0.503,	5.325261 },
            { 170,	0.52,	5.5354 },
            { 180,	0.53,	5.6763 },
            { 190,	0.543,	5.845395 },
            { 210,	0.565,	6.1359 },
            { 230,	0.583,	6.380935 },
            { 255,	0.605,	6.676175 }
            // { 25, 0.0, 0.0 },
            // { 225, 1.0, 1.0 }
        },
        {
            {   0,  0.0,    0.0 },
            {  60,	0.012,	0.09336 },
            {  70,	0.055,	0.4411 },
            {  80,	0.12,	0.9888 },
            {  90,	0.19,	1.6036 },
            { 100,	0.27,	2.3301 },
            { 110,	0.352,	3.10816 },
            { 120,	0.44,	3.971 },
            { 130,	0.527,	4.85367 },
            { 140,	0.618,	5.8092 },
            { 150,	0.712,	6.82808 },
            { 160,	0.8,	7.816 },
            { 170,	0.89,	8.8555 },
            { 180,	0.975,	9.867 },
            { 190,	1.055,	10.83485 },
            { 200,	1.1,	11.44 },
            { 210,	1.125,	11.82375 },
            { 220,	1.135,	12.013975 },
            { 255,	1.168,	12.51512 }
            // { 50, 0.0, 0.0 },
            // { 255, 1.0, 1.0 }
        }
    };

    float x2y(float xVal, byte color, byte xPos, byte yPos) {
        for (int i = 0; i < POINT_COUNT; i++) {
            if (points[color][i][xPos] == xVal) {
                return points[color][i][yPos];
            }
            if (points[color][i][xPos] > xVal) {
                if (i == 0) {
                    return points[color][0][yPos];
                }

                float Dx = points[color][i][xPos] - points[color][i - 1][xPos];
                float dx = xVal - points[color][i - 1][xPos];
                float ratio = dx / Dx;

                float Dy = points[color][i][yPos] - points[color][i - 1][yPos];
                float dy = ratio * Dy;

                float yVal = points[color][i - 1][yPos] + dy;
                return yVal;
            }
        }

        return points[color][POINT_COUNT - 1][yPos];
    }

    float perc2P (float perc, byte color) {
        float Pmin = points[color][1][PPos];
        float Pmax = points[color][POINT_COUNT - 1][PPos];
        float D = Pmax / Pmin;
        return Pmin * pow(D, perc);
    }

public:

    byte Perc2Out(float perc, byte color) {
        float P = perc2P(perc, color);
        return x2y(P, color, PPos, OutPos) + 0.5;
    }

    float Out2Perc(byte output, byte color) {
        return 0.0;
    }
};